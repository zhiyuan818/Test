<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

	<!-- master数据源 -->
	<bean id="masterDataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<!-- 基本属性 url、user、password -->
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="initialSize" value="${jdbc.initialSize}" />
		<property name="minIdle" value="${jdbc.minIdle}" />
		<property name="maxActive" value="${jdbc.maxActive}" />
		<property name="maxWait" value="${jdbc.maxWait}" />
		<!-- 超过时间限制是否回收 -->
		<property name="removeAbandoned" value="${jdbc.removeAbandoned}" />
		<!-- 超过时间限制多长； -->
		<property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />
		<!-- 用来检测连接是否有效的sql，要求是一个查询语句 -->
		<property name="validationQuery" value="${jdbc.validationQuery}" />
		<!-- 申请连接的时候检测 -->
		<property name="testWhileIdle" value="${jdbc.testWhileIdle}" />
		<!-- 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
		<property name="testOnBorrow" value="${jdbc.testOnBorrow}" />
		<!-- 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
		<property name="testOnReturn" value="${jdbc.testOnReturn}" />
		<property name="poolPreparedStatements" value="${jdbc.poolPreparedStatements}"></property>
		<property name="maxPoolPreparedStatementPerConnectionSize" value="${jdbc.maxPoolPreparedStatementPerConnectionSize}"></property>
		<property name="filters" value="${jdbc.filters}" />
	</bean>

	<!-- slave数据源 -->
	<bean id="slaveDataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<property name="driverClassName" value="${slave.jdbc.driverClassName}" />
		<property name="url" value="${slave.jdbc.url}" />
		<property name="username" value="${slave.jdbc.username}" />
		<property name="password" value="${slave.jdbc.password}" />
		<property name="initialSize" value="${slave.jdbc.initialSize}" />
		<property name="minIdle" value="${slave.jdbc.minIdle}" />
		<property name="maxActive" value="${slave.jdbc.maxActive}" />
		<property name="maxWait" value="${slave.jdbc.maxWait}" />
		<property name="removeAbandoned" value="${slave.jdbc.removeAbandoned}" />
		<property name="removeAbandonedTimeout" value="${slave.jdbc.removeAbandonedTimeout}" />
		<property name="timeBetweenEvictionRunsMillis" value="${slave.jdbc.timeBetweenEvictionRunsMillis}" />
		<property name="minEvictableIdleTimeMillis" value="${slave.jdbc.minEvictableIdleTimeMillis}" />
		<property name="validationQuery" value="${slave.jdbc.validationQuery}" />
		<property name="testWhileIdle" value="${slave.jdbc.testWhileIdle}" />
		<property name="testOnBorrow" value="${slave.jdbc.testOnBorrow}" />
		<property name="testOnReturn" value="${slave.jdbc.testOnReturn}" />
		<property name="poolPreparedStatements" value="${slave.jdbc.poolPreparedStatements}"></property>
		<property name="maxPoolPreparedStatementPerConnectionSize" value="${slave.jdbc.maxPoolPreparedStatementPerConnectionSize}"></property>
		<property name="filters" value="${slave.jdbc.filters}" />
	</bean>

	<!-- 动态数据源，根据service接口上的注解来决定取哪个数据源 -->
	<bean id="dataSource" class="com.jjxt.ssm.utils.DynamicDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<!-- write or slave -->
				<entry key="slave" value-ref="slaveDataSource" />
				<!-- read or master -->
				<entry key="master" value-ref="masterDataSource" />
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="masterDataSource" />
	</bean>

	<!-- 配置sql工厂 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="mapperLocations" value="classpath:com/jjxt/ssm/mapper/*.xml"></property>
	</bean>
	<!-- 生成mapper对象 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
		<property name="basePackage" value="com.jjxt.ssm.mapper"></property>
	</bean>
	<!-- 事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- 为业务逻辑层的方法解析@DataSource注解 为当前线程的HandleDataSource注入数据源 -->
	<bean id="dataSourceAspect" class="com.jjxt.ssm.aspect.DataSourceAspect" />
	<aop:config proxy-target-class="true">
		<aop:aspect id="dataSourceAspects" ref="dataSourceAspect"
			order="2">
			<aop:pointcut id="tx"
				expression="execution(* com.jjxt.ssm.service.impl..*.*(..)) " />
			<aop:before pointcut-ref="tx" method="before" />
		</aop:aspect>
	</aop:config>

	<!-- 支持上传文件 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="10000000" />
		<!-- <bean id="multipartResolver" class="org.springframework.web.multipart.support.StandardServletMultipartResolver"> 
			</bean> -->
	</bean>
</beans>

